package com.glority.quality.connectors.vdi;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;

import org.apache.commons.lang.StringUtils;

import com.glority.quality.model.Configuration;
import com.glority.quality.model.Environments;

/**
 * The connector for configuration CSV file The configuration csv is the file
 * generated by vdi stores all the env configuration data in a csv file.
 * 
 * Note: "," and ";" are not valid char for software name in quality system.
 * 
 * @author XQS
 * 
 */
public class ConfigurationCSV {
    public static final String CSV_CONFIGURATION_OS = "OS";
    public static final String CSV_CONFIGURATION_LANG = "Language";
    public static final String CSV_CONFIGURATION_ARCH = "Arch";

    private Configuration cfg;
    private String csvPath;

    public ConfigurationCSV() {
        cfg = new Configuration();
        cfg.setEnvironments(new Environments());
        cfg.setSoftwares(new ArrayList<String>());
    }

    public Configuration getCfg() {
        return cfg;
    }

    public void setCfg(Configuration cfg) {
        this.cfg = cfg;
    }

    public String getCsvPath() {
        return csvPath;
    }

    public void setCsvPath(String csvPath) {
        this.csvPath = csvPath;
    }

    /**
     * Parse the configuration cvs.
     * @throws Exception
     */
    public void parseCSV() throws Exception {
        File csv = new File(csvPath);
        BufferedReader in = new BufferedReader(new FileReader(csv));
        String line = null;
        while ((line = in.readLine()) != null) {
            int ip = line.indexOf(",");
            if (ip < 0 && ip >= line.length()) {
                continue;
            }
            String name = line.substring(0, ip);
            String value = line.substring(ip + 1);
            if (CSV_CONFIGURATION_OS.equals(name)) {
                cfg.getEnvironments().setOs(value);
            } else if (CSV_CONFIGURATION_LANG.equals(name)) {
                cfg.getEnvironments().setLanguage(value);
            } else if (CSV_CONFIGURATION_ARCH.equals(name)) {
                cfg.getEnvironments().setArch(value);
            } else {
                cfg.addSoftware(line);
            }
        }
        in.close();
    }

    public void exportCSV() throws Exception {
        File csv = new File(csvPath);
        BufferedWriter out = new BufferedWriter(new FileWriter(csv));

        if (!StringUtils.isEmpty(cfg.getEnvironments().getOs())) {
            out.write(CSV_CONFIGURATION_OS + ","
                    + cfg.getEnvironments().getOs());
            out.write("\n");
        }
        if (!StringUtils.isEmpty(cfg.getEnvironments().getLanguage())) {
            out.write(CSV_CONFIGURATION_LANG + ","
                    + cfg.getEnvironments().getLanguage());
            out.write("\n");
        }
        if (!StringUtils.isEmpty(cfg.getEnvironments().getOs())) {
            out.write(CSV_CONFIGURATION_ARCH + ","
                    + cfg.getEnvironments().getArch());
            out.write("\n");
        }
        for (String software : cfg.getSoftwares()) {
            out.write(software);
            out.write("\n");
        }
        out.close();
    }
}
